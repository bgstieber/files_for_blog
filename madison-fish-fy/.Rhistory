axis.text.y = element_text(colour = 'white'),
axis.title.x = element_blank(),
plot.background = element_rect(fill = 'black'),
axis.text.x = element_text(colour = 'white'),
title = element_text(colour = 'white'))+
ggtitle('Running Count of Mass Shootings in US',
subtitle =
paste0('The blue line shows the running count of mass shootings by date.',
'\nEach red line represents a day in which a mass shooting occurred.'))+
labs(caption = 'Source: http://www.motherjones.com/politics/2012/12/mass-shootings-mother-jones-full-data/')
# date_data %>%
tibble(date = unique_dates) %>%
arrange(date) %>%
mutate(all_ones = 1) %>%
mutate(cumulative_shootings = cumsum(all_ones)) %>%
filter(lubridate::year(date) >= 2016) %>%
ggplot(aes(date, cumulative_shootings))+
geom_segment(aes(xend = date, y = -Inf, yend = Inf), colour = 'red')+
geom_line(colour = 'dodgerblue3', size = 1)+
geom_point(colour = 'dodgerblue3', size = 2)+
theme_minimal()+
scale_x_date(date_breaks = '2 years',
labels = function(l) lubridate::year(l))+
scale_y_continuous('Running Total of US Mass Shootings Since 1982',
breaks = seq(0, 200, 20))+
theme(panel.grid = element_blank(),
axis.text.y = element_text(colour = 'white'),
axis.title.x = element_blank(),
plot.background = element_rect(fill = 'black'),
axis.text.x = element_text(colour = 'white'),
title = element_text(colour = 'white'))+
ggtitle('Running Count of Mass Shootings in US',
subtitle =
paste0('The blue line shows the running count of mass shootings by date.',
'\nEach red line represents a day in which a mass shooting occurred.'))+
labs(caption = 'Source: http://www.motherjones.com/politics/2012/12/mass-shootings-mother-jones-full-data/')
date_data
date_data %>%
ggplot(aes(date, DaysSincePreviousShooting))+geom_point()
tibble(date = unique_dates) %>%
arrange(date) %>% View
tibble(date = unique_dates) %>%
arrange(date) %>%
mutate(DaysUntilNextShooting = as.numeric(difftime(lead(date), date, 'days')))
tibble(date = unique_dates) %>%
arrange(date) %>%
mutate(DaysUntilNextShooting = as.numeric(difftime(lead(date), date, 'days'))) %>% View
tibble(date = unique_dates) %>%
arrange(date) %>%
mutate(DaysUntilNextShooting = as.numeric(difftime(lead(date), date, 'days'))) %>%
filter(lubridate::year(date) >= 2016) %>%
summarise(median(DaysUntilNextShooting, na.rm = TRUE))
tibble(date = unique_dates) %>%
arrange(date) %>%
mutate(DaysUntilNextShooting = as.numeric(difftime(lead(date), date, 'days'))) %>%
filter(lubridate::year(date) >= 2016) %>%
summarise(mean(DaysUntilNextShooting, na.rm = TRUE))
tibble(date = unique_dates) %>%
arrange(date) %>%
mutate(DaysUntilNextShooting = as.numeric(difftime(lead(date), date, 'days'))) %>%
filter(lubridate::year(date) >= 2015) %>%
summarise(mean(DaysUntilNextShooting, na.rm = TRUE))
tibble(date = unique_dates) %>%
arrange(date) %>%
mutate(DaysUntilNextShooting = as.numeric(difftime(lead(date), date, 'days'))) %>%
filter(lubridate::year(date) >= 2015) %>%
summarise(median(DaysUntilNextShooting, na.rm = TRUE))
tibble(date = unique_dates) %>%
arrange(date) %>%
mutate(DaysUntilNextShooting = as.numeric(difftime(lead(date), date, 'days'))) %>%
filter(lubridate::year(date) >= 2014) %>%
summarise(median(DaysUntilNextShooting, na.rm = TRUE))
tibble(date = unique_dates) %>%
arrange(date) %>%
mutate(DaysUntilNextShooting = as.numeric(difftime(lead(date), date, 'days'))) %>%
filter(lubridate::year(date) >= 2013) %>%
summarise(median(DaysUntilNextShooting, na.rm = TRUE))
tibble(date = unique_dates) %>%
arrange(date) %>%
mutate(DaysUntilNextShooting = as.numeric(difftime(lead(date), date, 'days'))) %>%
filter(lubridate::year(date) >= 2015) %>%
summarise(median(DaysUntilNextShooting, na.rm = TRUE))
tibble(date = unique_dates) %>%
arrange(date) %>%
mutate(DaysUntilNextShooting = as.numeric(difftime(lead(date), date, 'days'))) %>%
filter(lubridate::year(date) >= 2010) %>%
summarise(median(DaysUntilNextShooting, na.rm = TRUE))
tibble(date = unique_dates) %>%
arrange(date) %>%
mutate(DaysUntilNextShooting = as.numeric(difftime(lead(date), date, 'days'))) %>%
filter(lubridate::year(date) >= 2015) %>%
summarise(median(DaysUntilNextShooting, na.rm = TRUE))
tibble(date = unique_dates) %>%
arrange(date) %>%
mutate(DaysUntilNextShooting = as.numeric(difftime(lead(date), date, 'days'))) %>%
filter(lubridate::year(date) >= 2014) %>%
summarise(median(DaysUntilNextShooting, na.rm = TRUE))
tibble(date = unique_dates) %>%
arrange(date) %>%
mutate(DaysUntilNextShooting = as.numeric(difftime(lead(date), date, 'days'))) %>%
filter(lubridate::year(date) >= 2012) %>%
summarise(median(DaysUntilNextShooting, na.rm = TRUE))
tibble(date = unique_dates) %>%
arrange(date) %>%
mutate(DaysUntilNextShooting = as.numeric(difftime(lead(date), date, 'days'))) %>%
filter(lubridate::year(date) >= 2016) %>%
summarise(median(DaysUntilNextShooting, na.rm = TRUE))
tibble(date = unique_dates) %>%
arrange(date) %>%
mutate(DaysUntilNextShooting = as.numeric(difftime(lead(date), date, 'days'))) %>%
filter(lubridate::year(date) >= 2016) %>%
summarise(mean(DaysUntilNextShooting, na.rm = TRUE))
tibble(date = unique_dates) %>%
arrange(date) %>%
mutate(DaysUntilNextShooting = as.numeric(difftime(lead(date), date, 'days'))) %>%
filter(lubridate::year(date) >= 2016) -> dd
hist(dd$DaysUntilNextShooting)
hist(log1p(dd$DaysUntilNextShooting))
hist(dd$DaysUntilNextShooting, 30)
dd %>% count(DaysUntilNextShooting)
dd %>% count(DaysUntilNextShooting) %>%
ggplot(aes(DaysUntilNextShooting, n))+geom_col()
date_data %>% count(DaysUntilNextShooting) %>%
ggplot(aes(DaysUntilNextShooting, n))+geom_col()
date_data
date_data %>% View()
date_data <- tibble(date = unique_dates) %>%
arrange(date) %>%
mutate(NextShooting = lead(date),
PreviousShooting = lag(date)) %>%
mutate(DaysSincePreviousShooting =
as.numeric(
difftime(date, PreviousShooting,'days')))
date_data %>% count(DaysUntilNextShooting) %>%
ggplot(aes(DaysUntilNextShooting, n))+geom_col()
date_data %>% count(DaysSincePreviousShooting) %>%
ggplot(aes(DaysSincePreviousShooting, n))+geom_col()
table(date_data$DaysSincePreviousShooting)
date_data %>% count(DaysSincePreviousShooting) %>%
arrange(desc(n))
date_data <- tibble(date = unique_dates) %>%
arrange(date) %>%
mutate(NextShooting = lead(date),
PreviousShooting = lag(date)) %>%
mutate(DaysSincePreviousShooting =
as.numeric(
difftime(date, PreviousShooting,'days')))
1980:2019 / 5
round(1980:2019 / 5)
round(1981:2019 / 5)
round(1981:201901 / 5)
round(1981:2019-1 / 5)
round((1981:2019-1) / 5)
2016 / 5
2019/5
floor((1981:2019-1) / 5)
floor((1985:2019-1) / 5)
floor((1980:2019-1) / 5)
floor((1980:2019) / 5)
1980 / 396
5 * floor((1980:2019) / 5)
date_data %>%
mutate(year_date = lubridate::year(date)) %>%
mutate(year_group = ifelse(year_date <= 1985,
"1985 and earlier",
ifelse(year_date <= 1990, "1986-1990",
ifelse(year_date <= 1995, "1991-1995",
ifelse(year_date <= 2000, "1996-2000",
ifelse(year_date <= 2005,
"2001-2005",
ifelse(year_date <= 2010,
"2006-2010",
ifelse(year_date <= 2015,
"2011-2015",
"2016+"))))))))
date_data %>%
mutate(year_date = lubridate::year(date)) %>%
mutate(year_group = ifelse(year_date <= 1985,
"1985 and earlier",
ifelse(year_date <= 1990, "1986-1990",
ifelse(year_date <= 1995, "1991-1995",
ifelse(year_date <= 2000, "1996-2000",
ifelse(year_date <= 2005,
"2001-2005",
ifelse(year_date <= 2010,
"2006-2010",
ifelse(year_date <= 2015,
"2011-2015",
"2016+")))))))) %>%
group_by(year_group) %>%
summarise(n = n(),
med_dsps = median(DaysSincePreviousShooting, na.rm = TRUE),
mean_dsps = mean(DaysSincePreviousShooting, na.rm = TRUE))
date_data %>%
count(year_date)
date_data %>%
mutate(year_date = lubridate::year(date)) %>%
date_data %>%
mutate(year_date = lubridate::year(date)) %>%
count(year_date, sort = TRUE)
mass_shootings
mass_shootings %>% head
mass_shootings %>% head %>% View
date_data
date_data %>%
filter(lubridate::year(date) >= 2017)
length(c(1:12, 1:12, 1:8))
date_data %>%
filter(lubridate::year(date) >= 2017) %>% View
difftime(as.Date('2019-08-04'), as.Date('2017-01-01'))
as.numeric(difftime(as.Date('2019-08-04'), as.Date('2017-01-01')))
30/945
as.numeric(difftime(as.Date('2019-08-04'), as.Date('2016-01-01')))
date_data %>%
filter(lubridate::year(date) >= 2016
) %>% View
36/1311
date_data %>%
mutate(year_date = lubridate::year(date)) %>%
mutate(year_group = ifelse(year_date <= 1985,
"1985 and earlier",
ifelse(year_date <= 1990, "1986-1990",
ifelse(year_date <= 1995, "1991-1995",
ifelse(year_date <= 2000, "1996-2000",
ifelse(year_date <= 2005,
"2001-2005",
ifelse(year_date <= 2010,
"2006-2010",
ifelse(year_date <= 2015,
"2011-2015",
"2016+")))))))) %>%
group_by(year_group) %>%
summarise(n = n(),
med_dsps = median(DaysSincePreviousShooting, na.rm = TRUE),
mean_dsps = mean(DaysSincePreviousShooting, na.rm = TRUE))
date_data <- tibble(date = unique_dates) %>%
arrange(date) %>%
mutate(NextShooting = lead(date),
PreviousShooting = lag(date)) %>%
mutate(DaysSincePreviousShooting =
as.numeric(
difftime(date, PreviousShooting,'days')))
# date_data %>%
tibble(date = unique_dates) %>%
arrange(date) %>%
mutate(all_ones = 1) %>%
mutate(cumulative_shootings = cumsum(all_ones)) %>%
ggplot(aes(date, cumulative_shootings))+
geom_segment(aes(xend = date, y = -Inf, yend = Inf), colour = 'red')+
geom_line(colour = 'dodgerblue3', size = 1)+
geom_point(colour = 'dodgerblue3', size = 2)+
theme_minimal()+
scale_x_date(date_breaks = '2 years',
labels = function(l) lubridate::year(l))+
scale_y_continuous('Running Total of US Mass Shootings Since 1982',
breaks = seq(0, 200, 20))+
theme(panel.grid = element_blank(),
axis.text.y = element_text(colour = 'white'),
axis.title.x = element_blank(),
plot.background = element_rect(fill = 'black'),
axis.text.x = element_text(colour = 'white'),
title = element_text(colour = 'white'))+
ggtitle('Running Count of Mass Shootings in US',
subtitle =
paste0('The blue line shows the running count of mass shootings by date.',
'\nEach red line represents a day in which a mass shooting occurred.'))+
labs(caption = 'Source: http://www.motherjones.com/politics/2012/12/mass-shootings-mother-jones-full-data/')
library(tidyverse)
dat <- read.table('clipboard', sep = '\t', header = TRUE, stringsAsFactors = FALSE)
dat
dat <- as_tibble(dat)
dat
dat %>%
select(-HANDICAP., -YARDS.)
dat %>%
select(-HANDICAP., -YARDS.) %>%
group_by(HOLE., PAR.) %>%
summarise_all(sum)
dat_summary <- dat %>%
select(-HANDICAP., -YARDS.) %>%
group_by(HOLE., PAR.) %>%
summarise_all(sum)
dat_summary
dat_summary %>%
mutate(to_par = -2 * EAGLES. + -1*BIRDIES. + BOGEYS. + 2 * D.BOGEYS.,
avg_to_par = to_par / (EAGLES. + BIRDIES. + PARS. + BOGEYS. + D.BOGEYS.))
dat_summary <- dat_summary %>%
mutate(to_par = -2 * EAGLES. + -1*BIRDIES. + BOGEYS. + 2 * D.BOGEYS.,
avg_to_par = to_par / (EAGLES. + BIRDIES. + PARS. + BOGEYS. + D.BOGEYS.))
dat_summary %>%
ggplot(aes(HOLE., avg_to_par))
dat_summary %>%
ggplot(aes(HOLE., avg_to_par)))+geom_col()
dat_summary %>%
ggplot(aes(HOLE., avg_to_par))+geom_col()
dat_summary %>%
ggplot(aes(reorder(HOLE., avg_to_par), avg_to_par))+geom_col()
dat_summary %>%
ggplot(aes(reorder(HOLE., avg_to_par), avg_to_par))+
geom_col()+
coord_flip()
dat_summary %>%
ggplot(aes(reorder(HOLE., avg_to_par), avg_to_par))+
geom_col(aes(fill = PAR.))+
coord_flip()
dat_summary %>%
ggplot(aes(reorder(HOLE., avg_to_par), avg_to_par))+
geom_col(aes(fill = factor(PAR.)))+
coord_flip()
dat_summary
dat_summary %>%
gather(score, count, -HOLE., -PAR., -to_par, -avg_to_par)
dat_summary %>%
gather(score, count, -HOLE., -PAR., -to_par, -avg_to_par) %>%
ggplot(aes(HOLE., count, fill = score))+
geom_bar()
dat_summary %>%
gather(score, count, -HOLE., -PAR., -to_par, -avg_to_par) %>%
ggplot(aes(HOLE., count, fill = score))+
geom_col()
dat_summary %>%
gather(score, count, -HOLE., -PAR., -to_par, -avg_to_par) %>%
ggplot(aes(HOLE., count, fill = score))+
geom_col(position = 'fill')
dat_summary %>%
gather(score, count, -HOLE., -PAR., -to_par, -avg_to_par) %>%
ggplot(aes(reorder(HOLE.,avg_to_par), count, fill = score))+
geom_col(position = 'fill')
dat_summary %>%
gather(score, count, -HOLE., -PAR., -to_par, -avg_to_par) %>%
ggplot(aes(reorder(HOLE.,avg_to_par), count, fill = score))+
geom_col(position = 'fill')+
coord_flip()
dput(dat)
2499/2500
(2499/2500) ^ 500
holes_in_one <- rbinom(500, 1, prob = 1/2500)
holes_in_one
mean(holes_in_one)
sims <- replicate(1000, expr = mean(rbinom(500, 1, prob = 1/2500)))
hist(sims)
summary(sims)
sims <- replicate(1000, expr = sum(rbinom(500, 1, prob = 1/2500)))
(1/2500) / (1 + (1/2500))
1/2500
ph <- (1/2500) / (1 + (1/2500))
sims <- replicate(1000, expr = sum(rbinom(500, 1, prob = ph)))
sims
summary(sims)
hist(Sims)
mean(sims)
dat <- read.table('clipboard', sep = '\t', header = TRUE, stringsAsFactors = FALSE)
dat
library(tidyverse)
dat <- as_tibble(dat)
dat
dat <- dat %>%
mutate(review_date = lubridate::mdy(review_date))
dat
dat %>%
count(review_date)
dat %>%
count(review_date) %>%
ggplot(aes(review_date, n))+geom_col()
dat %>%
arrange(review_date)
dat %>%
group_by(rest_name) %>%
arrange(review_date) %>%
mutate(allones = 1) %>%
mutate(cumu_obs = cumsum(allones)) %>%
ggplot(aes(review_date, cumu_obs, group = rest_name))+geom_line()
dat %>%
group_by(rest_name) %>%
arrange(review_date) %>%
mutate(allones = 1) %>%
mutate(cumu_obs = cumsum(allones)) %>%
ggplot(aes(review_date, cumu_obs, group = rest_name))+geom_line()+
scale_y_sqrt()
dat %>%
count(rest_name, sort = TRUE)
setwd("~/files_for_blog/madison-fish-fy")
library(tidyverse)
library(tidytext)
library(zoo)
review_data <- read_csv("review_analysis_data.csv")
review_data <- review_data %>%
mutate(recommendation = ifelse(grepl("barely", recommendation),
"barely recommend",
ifelse(grepl("highly", recommendation),
"highly recommend",
ifelse(grepl("not", recommendation),
"not recommend", "recommend")))) %>%
mutate(recommend_indicator = ifelse(recommendation %in% c("highly recommend",
"recommend"), 1,0),
recommend_numeric = ifelse(
recommendation == 'highly recommend', 4,
ifelse(recommendation == 'recommend', 3,
ifelse(recommendation == 'barely recommend', 2, 1)))) %>%
filter(!is.na(review)) %>% # get rid of NA reviews
mutate(review_month_start_date = lubridate::floor_date(review_date, "month"))
review_data_distinct <- review_data %>%
group_by(rest_name, review) %>%
slice(which.min(review_date)) %>%
ungroup()
# monthly data
monthly_summary <- review_data %>%
group_by(review_month_start_date) %>%
summarise(count_review = n(),
percent_recommended = mean(recommend_indicator),
recommend_indicator = sum(recommend_indicator),
recommend_numeric = sum(recommend_numeric),
length_written = sum(review_length),
avg_polarity = mean(polarity)) %>%
ungroup() %>%
mutate_all(list('rollmean_6' = ~ rollmean(., k = 7, fill = NA)))
monthly_summary %>%
ggplot(aes(review_month_start_date, count_review))+
geom_line(alpha = 0.5)+
geom_hline(aes(yintercept = mean(count_review)),linetype = 'dashed')+
geom_line(aes(y = count_review_rollmean_6), colour = 'blue', size = 1.2)
monthly_summary %>%
ggplot(aes(review_month_start_date, percent_recommended))+
geom_line(alpha = 0.5)+
geom_hline(aes(yintercept = mean(percent_recommended)),linetype = 'dashed')+
geom_line(aes(y = percent_recommended_rollmean_6),
colour = 'blue', size = 1.2)
review_data_distinct %>%
filter(review_length >= 100) %>%
ggplot(aes(recommend_numeric, polarity, group = recommend_numeric))+
geom_boxplot()
review_data_distinct %>%
filter(review_length >= 100) %>%
ggplot(aes(recommend_indicator, polarity,
group = recommend_indicator))+
geom_boxplot()
fit1 <- lm(polarity ~ factor(recommend_numeric),
data = review_data_distinct %>% filter(review_length >= 100))
review_data_distinct %>%
filter(review_length >= 100) %>%
ggplot(aes(polarity, recommend_indicator))+
geom_jitter(alpha = 0.25) +
stat_smooth()
glm1 <- glm(recommend_indicator ~ polarity,
data = review_data_distinct %>%
filter(review_length >= 100),
family = 'binomial')
review_data_distinct %>%
filter(review_length >= 100) %>%
select(review, recommend_indicator) %>%
mutate(recommend_indicator = ifelse(recommend_indicator == 1, 'Y', 'N')) %>%
unnest_tokens(word, review)
tokenized_by_recommend <- review_data_distinct %>%
filter(review_length >= 100) %>%
select(review, recommend_indicator) %>%
mutate(recommend_indicator = ifelse(recommend_indicator == 1, 'Y', 'N')) %>%
unnest_tokens(word, review) %>%
anti_join(stop_words)
tokenized_by_recommend %>%
group_by(recommend_indicator) %>%
summarise(total = n())
tokenized_by_recommend %>%
count(word, recommend_indicator)
tokenized_by_recommend %>%
count(word, recommend_indicator) %>%
inner_join(count_total) %>%
mutate(freq = n / total)
count_total <- tokenized_by_recommend %>%
group_by(recommend_indicator) %>%
summarise(total = n())
tokenized_by_recommend %>%
count(word, recommend_indicator) %>%
inner_join(count_total) %>%
mutate(freq = n / total)
frequency <- tokenized_by_recommend %>%
count(word, recommend_indicator) %>%
inner_join(count_total) %>%
mutate(freq = n / total)
frequency
frequency <- tokenized_by_recommend %>%
count(word, recommend_indicator) %>%
inner_join(count_total) %>%
mutate(freq_smooth = (n + 1) / (total + 1))
frequency
1 / 60000
1 / 140000
frequency <- tokenized_by_recommend %>%
count(word, recommend_indicator) %>%
group_by(word) %>%
filter(sum(n) >= 10) %>%
ungroup() %>%
spread(recommend_indicator, n, fill = 0) %>%
mutate_if(is.numeric, list(~(. + 1) / (sum(.) + 1))) %>%
mutate(logratio = log(Y / N)) %>%
arrange(desc(logratio))
frequency
frequency %>%
view()
?view
tokenized_by_recommend
tokenized_by_recommend %>%
count(word, sort = TRUE)
tokenized_by_recommend %>%
count(word, sort = TRUE) %>%
top_n(30, n) %>%
ggplot(aes(reorder(word, n), n))+geom_col()
tokenized_by_recommend %>%
count(word, sort = TRUE) %>%
top_n(30, n) %>%
ggplot(aes(reorder(word, n), n))+geom_col()+
coord_flip()
review_data
